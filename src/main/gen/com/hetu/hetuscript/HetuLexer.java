// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: HetuLexer.flex

package com.hetu.hetuscript;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import static com.hetu.hetuscript.HetuTypes.*;


class HetuLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\3\u0100\1\u0200\1\u0100\1\u0300\1\u0400\1\u0100\5\u0500"+
    "\1\u0600\1\u0700\1\u0800\6\u0100\1\u0900\1\u0a00\1\u0b00\1\u0c00"+
    "\1\u0d00\1\u0e00\3\u0100\1\u0f00\205\u0100\1\u0700\1\u0100\1\u1000"+
    "\1\u1100\1\u1200\1\u1300\54\u0100\10\u1400\37\u0100\1\u0a00\4\u0100"+
    "\1\u1500\10\u0100\1\u1600\2\u0100\1\u1700\1\u1800\1\u1300\1\u0100"+
    "\1\u0600\1\u0100\1\u1900\1\u1600\1\u0900\3\u0100\1\u1200\1\u1a00"+
    "\114\u0100\1\u1b00\1\u1200\153\u0100\1\u1c00\11\u0100\1\u1d00\1\u1300"+
    "\6\u0100\1\u1200\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\2\3\1\4\1\3\22\0\1\5"+
    "\1\6\1\7\5\0\2\10\1\11\1\12\1\13\1\12"+
    "\1\14\1\15\12\16\1\0\1\17\1\6\1\20\1\6"+
    "\2\0\4\21\1\22\1\21\1\23\1\21\1\24\4\21"+
    "\1\25\3\21\1\26\1\27\1\30\6\21\1\31\1\32"+
    "\1\33\1\34\1\21\1\0\1\35\1\36\1\37\1\21"+
    "\1\40\1\41\1\21\1\42\1\43\1\21\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\21\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\21\1\61\1\0\1\62"+
    "\7\0\1\3\u01ab\0\1\63\1\64\2\0\1\65\2\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\0\1\73\1\0"+
    "\1\74\1\75\14\0\1\76\u0111\0\12\77\206\0\12\77"+
    "\306\0\12\77\234\0\12\77\166\0\12\77\140\0\12\77"+
    "\166\0\12\77\106\0\12\77\u0116\0\12\77\106\0\12\77"+
    "\u0146\0\12\77\46\0\12\77\u012c\0\12\77\200\0\12\77"+
    "\246\0\12\77\6\0\12\77\266\0\12\77\126\0\12\77"+
    "\206\0\12\77\6\0\12\77\316\0\2\3\u01a6\0\12\77"+
    "\46\0\12\77\306\0\12\77\26\0\12\77\126\0\12\77"+
    "\u0196\0\12\77\6\0\u0100\3\240\0\12\77\206\0\12\77"+
    "\u012c\0\12\77\200\0\12\77\74\0\12\77\220\0\12\77"+
    "\166\0\12\77\146\0\12\77\206\0\12\77\106\0\12\77"+
    "\266\0\12\77\u0164\0\62\77\100\0\12\77\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7680];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\1\1\3\3\4\15\5\1\6"+
    "\1\7\2\6\1\10\1\1\1\0\1\11\1\12\12\5"+
    "\1\13\6\5\1\0\1\14\1\15\2\0\15\5\4\0"+
    "\4\5\1\0\3\5\100\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\300"+
    "\0\300\0\u01c0\0\u0180\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\300\0\300\0\u0540\0\u0580\0\300\0\u05c0\0\u0600\0\300"+
    "\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0200\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\300\0\300\0\u0ac0\0\u0b00\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\2\6\1\7\1\10\5\11"+
    "\1\12\1\4\1\11\1\13\10\14\1\11\1\4\1\11"+
    "\1\4\1\15\1\16\1\17\1\20\1\21\1\14\1\22"+
    "\3\14\1\23\2\14\1\24\1\25\1\26\1\14\1\27"+
    "\1\30\1\14\2\11\15\4\3\31\2\4\2\31\1\32"+
    "\21\31\1\33\1\34\45\31\11\35\1\36\66\35\116\0"+
    "\1\37\60\0\1\37\2\0\1\6\1\0\2\6\112\0"+
    "\1\11\70\0\1\40\3\0\1\41\100\0\1\14\2\0"+
    "\10\14\4\0\24\14\35\0\1\14\2\0\10\14\4\0"+
    "\16\14\1\42\5\14\35\0\1\14\2\0\10\14\4\0"+
    "\15\14\1\43\6\14\35\0\1\14\2\0\10\14\4\0"+
    "\10\14\1\44\2\14\1\45\10\14\35\0\1\14\2\0"+
    "\10\14\4\0\10\14\1\46\12\14\1\47\35\0\1\14"+
    "\2\0\10\14\4\0\1\50\5\14\1\51\4\14\1\52"+
    "\4\14\1\53\3\14\35\0\1\14\2\0\10\14\4\0"+
    "\4\14\1\54\4\14\1\47\12\14\35\0\1\14\2\0"+
    "\10\14\4\0\20\14\1\55\3\14\35\0\1\14\2\0"+
    "\10\14\4\0\3\14\1\56\20\14\35\0\1\14\2\0"+
    "\10\14\4\0\20\14\1\57\3\14\35\0\1\14\2\0"+
    "\10\14\4\0\5\14\1\60\7\14\1\61\6\14\35\0"+
    "\1\14\2\0\10\14\4\0\1\52\23\14\35\0\1\14"+
    "\2\0\10\14\4\0\5\14\1\62\16\14\53\0\1\63"+
    "\75\0\1\31\14\0\1\31\2\0\1\31\1\0\1\31"+
    "\23\0\15\35\1\64\62\35\1\0\1\65\12\0\1\66"+
    "\1\0\1\37\3\0\1\67\15\0\1\67\36\0\1\37"+
    "\3\41\2\0\73\41\16\0\1\14\2\0\10\14\4\0"+
    "\16\14\1\70\5\14\35\0\1\14\2\0\10\14\4\0"+
    "\3\14\1\71\20\14\35\0\1\14\2\0\10\14\4\0"+
    "\1\72\23\14\35\0\1\14\2\0\10\14\4\0\12\14"+
    "\1\73\11\14\35\0\1\14\2\0\10\14\4\0\16\14"+
    "\1\74\5\14\35\0\1\14\2\0\10\14\4\0\14\14"+
    "\1\75\7\14\35\0\1\14\2\0\10\14\4\0\10\14"+
    "\1\46\13\14\35\0\1\14\2\0\10\14\4\0\12\14"+
    "\1\76\11\14\35\0\1\14\2\0\10\14\4\0\15\14"+
    "\1\54\6\14\35\0\1\14\2\0\10\14\4\0\12\14"+
    "\1\77\11\14\35\0\1\14\2\0\10\14\4\0\10\14"+
    "\1\100\13\14\35\0\1\14\2\0\10\14\4\0\17\14"+
    "\1\101\4\14\35\0\1\14\2\0\10\14\4\0\14\14"+
    "\1\102\7\14\35\0\1\14\2\0\10\14\4\0\6\14"+
    "\1\103\15\14\35\0\1\14\2\0\10\14\4\0\20\14"+
    "\1\74\3\14\35\0\1\14\2\0\10\14\4\0\6\14"+
    "\1\104\15\14\51\0\1\105\63\0\1\106\60\0\1\106"+
    "\12\0\1\107\3\0\1\110\60\0\1\110\16\0\1\14"+
    "\2\0\10\14\4\0\3\14\1\111\20\14\35\0\1\14"+
    "\2\0\10\14\4\0\1\112\23\14\35\0\1\14\2\0"+
    "\10\14\4\0\16\14\1\103\5\14\35\0\1\14\2\0"+
    "\10\14\4\0\17\14\1\113\4\14\35\0\1\14\2\0"+
    "\10\14\4\0\3\14\1\54\20\14\35\0\1\14\2\0"+
    "\10\14\4\0\13\14\1\111\10\14\35\0\1\14\2\0"+
    "\10\14\4\0\1\100\23\14\35\0\1\14\2\0\10\14"+
    "\4\0\2\14\1\54\21\14\35\0\1\14\2\0\10\14"+
    "\4\0\10\14\1\54\13\14\35\0\1\14\2\0\10\14"+
    "\4\0\20\14\1\114\3\14\35\0\1\14\2\0\10\14"+
    "\4\0\3\14\1\52\20\14\35\0\1\14\2\0\10\14"+
    "\4\0\16\14\1\54\5\14\35\0\1\14\2\0\10\14"+
    "\4\0\10\14\1\74\13\14\52\0\1\115\45\0\1\65"+
    "\14\0\1\106\3\0\1\67\15\0\1\67\36\0\1\106"+
    "\16\0\1\110\60\0\1\110\1\0\1\65\14\0\1\110"+
    "\60\0\1\110\16\0\1\14\2\0\10\14\4\0\15\14"+
    "\1\116\6\14\35\0\1\14\2\0\10\14\4\0\7\14"+
    "\1\54\14\14\35\0\1\14\2\0\10\14\4\0\6\14"+
    "\1\117\15\14\35\0\1\14\2\0\10\14\4\0\15\14"+
    "\1\120\6\14\24\0\1\121\110\0\1\14\2\0\10\14"+
    "\4\0\17\14\1\54\4\14\35\0\1\14\2\0\10\14"+
    "\4\0\12\14\1\61\11\14\35\0\1\14\2\0\10\14"+
    "\4\0\12\14\1\54\11\14\24\0\1\122\77\0\1\123"+
    "\77\0\1\124\77\0\1\125\77\0\1\126\77\0\1\127"+
    "\77\0\1\130\77\0\1\131\77\0\1\132\77\0\1\133"+
    "\77\0\1\134\77\0\1\135\77\0\1\136\77\0\1\137"+
    "\77\0\1\140\77\0\1\141\77\0\1\142\153\0\1\143"+
    "\23\0\1\144\144\0\1\145\65\0\1\146\113\0\1\147"+
    "\100\0\1\150\74\0\1\151\74\0\1\152\35\0\1\153"+
    "\121\0\1\154\100\0\1\155\75\0\1\156\75\0\1\157"+
    "\100\0\1\160\75\0\1\161\73\0\1\162\65\0\1\163"+
    "\154\0\1\164\22\0\1\165\77\0\1\166\107\0\1\167"+
    "\77\0\1\170\67\0\1\171\163\0\1\172\104\0\1\173"+
    "\64\0\1\174\107\0\1\175\73\0\1\176\15\0\1\177"+
    "\167\0\1\200\70\0\1\201\103\0\1\202\71\0\1\203"+
    "\106\0\1\204\75\0\1\205\21\0\1\206\71\0\1\207"+
    "\162\0\1\210\103\0\1\211\76\0\1\212\76\0\1\213"+
    "\72\0\1\214\17\0\1\215\160\0\1\216\43\0\1\217"+
    "\77\0\1\220\54\0\1\31\70\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8576];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\2\11\17\1\2\11\2\1\1\11"+
    "\1\1\1\0\1\11\22\1\1\0\2\11\2\0\15\1"+
    "\4\0\4\1\1\0\3\1\100\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HetuLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 14: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 15: break;
          case 3:
            { yybegin(STRING); return OPERATION_SIGN;
            }
          // fall through
          case 16: break;
          case 4:
            { return OPERATION_SIGN;
            }
          // fall through
          case 17: break;
          case 5:
            { return IDENTIFIER;
            }
          // fall through
          case 18: break;
          case 6:
            { return STRING;
            }
          // fall through
          case 19: break;
          case 7:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 20: break;
          case 8:
            { /* skip */
            }
          // fall through
          case 21: break;
          case 9:
            { yybegin(COMMENT);
            }
          // fall through
          case 22: break;
          case 10:
            { return COMMENT;
            }
          // fall through
          case 23: break;
          case 11:
            { return KEYWORD;
            }
          // fall through
          case 24: break;
          case 12:
            { yybegin(YYINITIAL); return COMMENT;
            }
          // fall through
          case 25: break;
          case 13:
            { return NUMBER;
            }
          // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
